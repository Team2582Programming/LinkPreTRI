// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoEleScaleH.h"
#include "Commands/AutoEleScaleL.h"
#include "Commands/AutoEleScaleM.h"
#include "Commands/AutoEleSwitch.h"
#include "Commands/AutoIntakeBox.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/GameEle.h"
//#include "Commands/GrabRung.h"
#include "Commands/IntakeBox.h"
#include "Commands/JoyDrive.h"
#include "Commands/OuttakeBox.h"
#include "Commands/PullUp.h"
#include "Commands/AutonomousDeadDrive.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    gamepad.reset(new frc::Joystick(0));
    
    pullArm.reset(new frc::JoystickButton(gamepad.get(), 6));
    pullArm->WhileHeld(new PullUp());
    //swingArm taken out because it was removed mechanically
    //swingArm.reset(new frc::JoystickButton(gamepad.get(), 5));
    //swingArm->WhenPressed(new GrabRung());
    elevatorScale4.reset(new frc::JoystickButton(gamepad.get(), 2));
    elevatorScale4->WhenPressed(new AutoEleScaleL());
    elevatorScale5.reset(new frc::JoystickButton(gamepad.get(), 3));
    elevatorScale5->WhenPressed(new AutoEleScaleM());
    elevatorScale6.reset(new frc::JoystickButton(gamepad.get(), 4));
    elevatorScale6->WhenPressed(new AutoEleScaleH());
    elevatorSwitch.reset(new frc::JoystickButton(gamepad.get(), 1));
    elevatorSwitch->WhenPressed(new AutoEleSwitch());

    joy.reset(new frc::Joystick(1));
    
    automaticIntake.reset(new frc::JoystickButton(joy.get(), 7));
    automaticIntake->WhenPressed(new AutoIntakeBox());
    manualOuttake.reset(new frc::JoystickButton(joy.get(), 2));
    manualOuttake->WhileHeld(new OuttakeBox());
    manualIntake.reset(new frc::JoystickButton(joy.get(), 1));
    manualIntake->WhileHeld(new IntakeBox());

    // SmartDashboard Buttons that are used to select which automomous command is picked
    frc::SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
    frc::SmartDashboard::PutData("D-Drive", new AutonomousDeadDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}


// Returns joy and gamepad systems
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getJoy() {
   return joy;
}

std::shared_ptr<frc::Joystick> OI::getGamepad() {
   return gamepad;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
