// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class DriveTrain: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<frc::SpeedController> rightFront;
	std::shared_ptr<frc::SpeedController> rightBack;
	std::shared_ptr<frc::SpeedControllerGroup> rightMotors;
	std::shared_ptr<frc::Encoder> rightEncoder;
	std::shared_ptr<frc::PIDController> rightSide;
	std::shared_ptr<frc::SpeedController> leftFront;
	std::shared_ptr<frc::SpeedController> leftBack;
	std::shared_ptr<frc::SpeedControllerGroup> leftMotors;
	std::shared_ptr<frc::Encoder> leftEncoder;
	std::shared_ptr<frc::PIDController> leftSide;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	//variables for x and y plane made
	double drive_x;
	double drive_y;

	//gyro instantiated
	std::shared_ptr<ADXRS450_Gyro> gyro;

public:
	DriveTrain();
	void InitDefaultCommand() override;
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	//Standard drive method that takes in the value of the
	//joystick and uses the x/y plane to set the speed and
	//direction of the robot
	void JoystickDrive(std::shared_ptr<frc::Joystick>);
	void AutoDrive();

	//stops 4 motors for the drivetrain
	void StopDrive();

	//gyro functions
	void AutoGyroDrive(double,double);
	double GetPower();
	double GetkP();
	double getAutoTime();
	double GetDelay();
	double TurnAngle();
	std::string GetDirection();
	double DisplayAngle();
	void ResetGyro();
	bool GetPos();
	void TurnRight(std::string, double);
	void TurnLeft(std::string, double);
	void TurnFun(std::string, double);
	void Backwards(double, double);

	//variables for the gyros
	double power;
	double kP;
	double autoTime;
	double delay;
	bool pos;

	//variables for the string side and neeeded angle
	double ultraVal;
	std::string SwitchPos;
	double turnAngle;

	//ultrasonic distance function
	double GetUltraVal();

	//get side we are on
	std::string GetSide();
};

#endif
